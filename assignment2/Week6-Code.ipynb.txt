{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import required packages\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#generate data\n",
    "#normal mu sigma numbers of data points\n",
    "np.random.seed(0)\n",
    "x = 2 - 3 * np.random.normal(0, 1, 20)\n",
    "y = x - 2 * (x ** 2) + 0.5 * (x ** 3) + np.random.normal(-3, 3, 20)\n",
    "plt.scatter(x,y, s=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xx = x[:, np.newaxis]\n",
    "type(xx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import required package\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "\n",
    "# transforming the data to include another axis\n",
    "x = x[:, np.newaxis]\n",
    "y = y[:, np.newaxis]\n",
    "\n",
    "#create a liniear regression model \n",
    "model = LinearRegression()\n",
    "model.fit(x, y)\n",
    "y_pred = model.predict(x)\n",
    "\n",
    "#diplay the best fit line\n",
    "plt.scatter(x, y, s=10)\n",
    "plt.plot(x, y_pred, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1131620902350652\n",
      "0.9982308265442509\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import required packages\n",
    "import operator\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "#provide data\n",
    "np.random.seed(0)\n",
    "x = 2 - 3 * np.random.normal(0, 1, 20)\n",
    "y = x - 2 * (x ** 2) + 0.5 * (x ** 3) + np.random.normal(-3, 3, 20)\n",
    "\n",
    "# transforming the data to include another axis\n",
    "x = x[:, np.newaxis]\n",
    "y = y[:, np.newaxis]\n",
    "\n",
    "#create polynomial regression\n",
    "polynomial_features= PolynomialFeatures(degree= 20)\n",
    "x_poly = polynomial_features.fit_transform(x)\n",
    "\n",
    "\n",
    "model = LinearRegression()\n",
    "model.fit(x_poly, y)\n",
    "y_poly_pred = model.predict(x_poly)\n",
    "\n",
    "rmse = np.sqrt(mean_squared_error(y,y_poly_pred))\n",
    "r2 = r2_score(y,y_poly_pred)\n",
    "print(rmse)\n",
    "print(r2)\n",
    "\n",
    "plt.scatter(x, y, s=10)\n",
    "# sort the values of x before line plot\n",
    "sort_axis = operator.itemgetter(0)\n",
    "sorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\n",
    "x, y_poly_pred = zip(*sorted_zip)\n",
    "plt.plot(x, y_poly_pred, color='b')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
